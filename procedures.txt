CREATE OR REPLACE PROCEDURE GetTopAlbums (
    criteria IN VARCHAR2,
    topN IN NUMBER,
    result OUT SYS_REFCURSOR
) AS
BEGIN
    IF criteria = 'Alphabetically' THEN
        OPEN result FOR
            SELECT album_name, artist_name, release_date
            FROM (
                SELECT album_name, artist_name, release_date
                FROM albums
                JOIN artists ON albums.artist_id = artists.artist_id
                ORDER BY album_name
            )
            WHERE ROWNUM <= topN;
    ELSIF criteria = 'Date of Release' THEN
        OPEN result FOR
            SELECT album_name, artist_name, release_date
            FROM (
                SELECT album_name, artist_name, release_date
                FROM albums
                JOIN artists ON albums.artist_id = artists.artist_id
                ORDER BY release_date
            )
            WHERE ROWNUM <= topN;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE GetTopVocalists (
    gender IN VARCHAR2,
    topN IN NUMBER,
    result OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN result FOR
        SELECT artist_name, avg_rating
        FROM (
            SELECT artist_name, AVG(rating) AS avg_rating,
                   ROW_NUMBER() OVER (ORDER BY AVG(rating) DESC) AS rn
            FROM artists
            JOIN songs ON artists.artist_id = songs.artist_id
            JOIN reviews ON songs.song_id = reviews.song_id
            WHERE artists.gender = gender
            GROUP BY artist_name
        )
        WHERE rn <= topN;
END;
/



CREATE OR REPLACE PROCEDURE GetTopArtistsByReleasedSongs (
    topN IN NUMBER,
    result OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN result FOR
        SELECT artist_name, total_songs
        FROM (
            SELECT artist_name, COUNT(song_id) AS total_songs,
                   ROW_NUMBER() OVER (ORDER BY COUNT(song_id) DESC) AS rn
            FROM artists
            JOIN songs ON artists.artist_id = songs.artist_id
            GROUP BY artist_name
        )
        WHERE rn <= topN;
END;
/


CREATE OR REPLACE FUNCTION GetTopVocalist (
    gender IN VARCHAR2,
    topN IN NUMBER
) RETURN SYS_REFCURSOR IS
    result SYS_REFCURSOR;
BEGIN
    OPEN result FOR
        SELECT artist_name, AVG(rating) AS avg_rating
        FROM (
            SELECT a.artist_name, r.rating
            FROM artists a
            JOIN songs s ON a.artist_id = s.artist_id
            JOIN reviews r ON s.song_id = r.song_id
            WHERE a.gender = gender
            ORDER BY r.rating DESC
        )
        WHERE ROWNUM <= topN
        GROUP BY artist_name;
        
    RETURN result;
END;
/

SQL> CREATE OR REPLACE PROCEDURE GetTopVocalists(
  2      p_gender IN VARCHAR2,
  3      p_topN IN NUMBER,
  4      p_cursor OUT SYS_REFCURSOR
  5  )
  6  AS
  7  BEGIN
  8      OPEN p_cursor FOR
  9      SELECT * FROM (
 10          SELECT artist_name, AVG(rating) AS avg_rating
 11          FROM artists
 12          JOIN songs ON artists.artist_id = songs.artist_id
 13          JOIN reviews ON songs.song_id = reviews.song_id
 14          WHERE gender = p_gender
 15          GROUP BY artist_name
 16          ORDER BY avg_rating DESC
 17      )
 18      WHERE ROWNUM <= p_topN;
 19  END;
 20
 21  /

Procedure created.










